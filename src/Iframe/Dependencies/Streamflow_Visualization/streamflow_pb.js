/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.DatasetSessions', null, global);
goog.exportSymbol('proto.GetMetadataRequest', null, global);
goog.exportSymbol('proto.GetMetadataResponse', null, global);
goog.exportSymbol('proto.ProtoBuffSerializedBinConfiguration', null, global);
goog.exportSymbol('proto.ProtoBuffSerializedDatasetMetadata', null, global);
goog.exportSymbol('proto.ProtoBuffSerializedSessionMetadata', null, global);
goog.exportSymbol('proto.PublishMetadataRequest', null, global);
goog.exportSymbol('proto.PublishMetadataResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DatasetSessions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DatasetSessions.repeatedFields_, null);
};
goog.inherits(proto.DatasetSessions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DatasetSessions.displayName = 'proto.DatasetSessions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DatasetSessions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DatasetSessions.prototype.toObject = function(opt_includeInstance) {
  return proto.DatasetSessions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DatasetSessions} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DatasetSessions.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetid: msg.getDatasetid(),
    sessionidList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DatasetSessions} The clone.
 */
proto.DatasetSessions.prototype.cloneMessage = function() {
  return /** @type {!proto.DatasetSessions} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string datasetId = 1;
 * @return {string}
 */
proto.DatasetSessions.prototype.getDatasetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.DatasetSessions.prototype.setDatasetid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated int64 sessionId = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.DatasetSessions.prototype.getSessionidList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<number>} value  */
proto.DatasetSessions.prototype.setSessionidList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.DatasetSessions.prototype.clearSessionidList = function() {
  jspb.Message.setField(this, 2, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoBuffSerializedDatasetMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoBuffSerializedDatasetMetadata.repeatedFields_, null);
};
goog.inherits(proto.ProtoBuffSerializedDatasetMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoBuffSerializedDatasetMetadata.displayName = 'proto.ProtoBuffSerializedDatasetMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoBuffSerializedDatasetMetadata.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoBuffSerializedDatasetMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoBuffSerializedDatasetMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoBuffSerializedDatasetMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ProtoBuffSerializedDatasetMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetid: msg.getDatasetid(),
    sessionmetadataList: jspb.Message.toObjectList(msg.getSessionmetadataList(),
    proto.ProtoBuffSerializedSessionMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ProtoBuffSerializedDatasetMetadata} The clone.
 */
proto.ProtoBuffSerializedDatasetMetadata.prototype.cloneMessage = function() {
  return /** @type {!proto.ProtoBuffSerializedDatasetMetadata} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string datasetId = 1;
 * @return {string}
 */
proto.ProtoBuffSerializedDatasetMetadata.prototype.getDatasetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.ProtoBuffSerializedDatasetMetadata.prototype.setDatasetid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ProtoBuffSerializedSessionMetadata sessionMetadata = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ProtoBuffSerializedSessionMetadata>}
 */
proto.ProtoBuffSerializedDatasetMetadata.prototype.getSessionmetadataList = function() {
  return /** @type{!Array.<!proto.ProtoBuffSerializedSessionMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoBuffSerializedSessionMetadata, 2));
};


/** @param {Array.<!proto.ProtoBuffSerializedSessionMetadata>} value  */
proto.ProtoBuffSerializedDatasetMetadata.prototype.setSessionmetadataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.ProtoBuffSerializedDatasetMetadata.prototype.clearSessionmetadataList = function() {
  this.setSessionmetadataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoBuffSerializedSessionMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoBuffSerializedSessionMetadata.repeatedFields_, null);
};
goog.inherits(proto.ProtoBuffSerializedSessionMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoBuffSerializedSessionMetadata.displayName = 'proto.ProtoBuffSerializedSessionMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoBuffSerializedSessionMetadata.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoBuffSerializedSessionMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoBuffSerializedSessionMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoBuffSerializedSessionMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ProtoBuffSerializedSessionMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionid: msg.getSessionid(),
    binconfigurationList: jspb.Message.toObjectList(msg.getBinconfigurationList(),
    proto.ProtoBuffSerializedBinConfiguration.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ProtoBuffSerializedSessionMetadata} The clone.
 */
proto.ProtoBuffSerializedSessionMetadata.prototype.cloneMessage = function() {
  return /** @type {!proto.ProtoBuffSerializedSessionMetadata} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 sessionId = 1;
 * @return {number}
 */
proto.ProtoBuffSerializedSessionMetadata.prototype.getSessionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.ProtoBuffSerializedSessionMetadata.prototype.setSessionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ProtoBuffSerializedBinConfiguration binConfiguration = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ProtoBuffSerializedBinConfiguration>}
 */
proto.ProtoBuffSerializedSessionMetadata.prototype.getBinconfigurationList = function() {
  return /** @type{!Array.<!proto.ProtoBuffSerializedBinConfiguration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoBuffSerializedBinConfiguration, 2));
};


/** @param {Array.<!proto.ProtoBuffSerializedBinConfiguration>} value  */
proto.ProtoBuffSerializedSessionMetadata.prototype.setBinconfigurationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.ProtoBuffSerializedSessionMetadata.prototype.clearBinconfigurationList = function() {
  this.setBinconfigurationList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoBuffSerializedBinConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoBuffSerializedBinConfiguration.repeatedFields_, null);
};
goog.inherits(proto.ProtoBuffSerializedBinConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ProtoBuffSerializedBinConfiguration.displayName = 'proto.ProtoBuffSerializedBinConfiguration';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoBuffSerializedBinConfiguration.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProtoBuffSerializedBinConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.ProtoBuffSerializedBinConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProtoBuffSerializedBinConfiguration} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ProtoBuffSerializedBinConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    featurename: msg.getFeaturename(),
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ProtoBuffSerializedBinConfiguration} The clone.
 */
proto.ProtoBuffSerializedBinConfiguration.prototype.cloneMessage = function() {
  return /** @type {!proto.ProtoBuffSerializedBinConfiguration} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string featureName = 1;
 * @return {string}
 */
proto.ProtoBuffSerializedBinConfiguration.prototype.getFeaturename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.ProtoBuffSerializedBinConfiguration.prototype.setFeaturename = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated float values = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.ProtoBuffSerializedBinConfiguration.prototype.getValuesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {Array.<number>} value  */
proto.ProtoBuffSerializedBinConfiguration.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


proto.ProtoBuffSerializedBinConfiguration.prototype.clearValuesList = function() {
  jspb.Message.setField(this, 2, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetMetadataRequest.repeatedFields_, null);
};
goog.inherits(proto.GetMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetMetadataRequest.displayName = 'proto.GetMetadataRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetMetadataRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetsessionsList: jspb.Message.toObjectList(msg.getDatasetsessionsList(),
    proto.DatasetSessions.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetMetadataRequest} The clone.
 */
proto.GetMetadataRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.GetMetadataRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated DatasetSessions datasetSessions = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.DatasetSessions>}
 */
proto.GetMetadataRequest.prototype.getDatasetsessionsList = function() {
  return /** @type{!Array.<!proto.DatasetSessions>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DatasetSessions, 1));
};


/** @param {Array.<!proto.DatasetSessions>} value  */
proto.GetMetadataRequest.prototype.setDatasetsessionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.GetMetadataRequest.prototype.clearDatasetsessionsList = function() {
  this.setDatasetsessionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.GetMetadataResponse.repeatedFields_, null);
};
goog.inherits(proto.GetMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetMetadataResponse.displayName = 'proto.GetMetadataResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.GetMetadataResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.GetMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetmetadataList: jspb.Message.toObjectList(msg.getDatasetmetadataList(),
    proto.ProtoBuffSerializedDatasetMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.GetMetadataResponse} The clone.
 */
proto.GetMetadataResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.GetMetadataResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ProtoBuffSerializedDatasetMetadata datasetMetadata = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.ProtoBuffSerializedDatasetMetadata>}
 */
proto.GetMetadataResponse.prototype.getDatasetmetadataList = function() {
  return /** @type{!Array.<!proto.ProtoBuffSerializedDatasetMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ProtoBuffSerializedDatasetMetadata, 1));
};


/** @param {Array.<!proto.ProtoBuffSerializedDatasetMetadata>} value  */
proto.GetMetadataResponse.prototype.setDatasetmetadataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.GetMetadataResponse.prototype.clearDatasetmetadataList = function() {
  this.setDatasetmetadataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PublishMetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PublishMetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PublishMetadataRequest.displayName = 'proto.PublishMetadataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PublishMetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PublishMetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PublishMetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PublishMetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    datasetid: msg.getDatasetid(),
    sessionmetadata: (f = msg.getSessionmetadata()) && proto.ProtoBuffSerializedSessionMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.PublishMetadataRequest} The clone.
 */
proto.PublishMetadataRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.PublishMetadataRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string datasetId = 1;
 * @return {string}
 */
proto.PublishMetadataRequest.prototype.getDatasetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.PublishMetadataRequest.prototype.setDatasetid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ProtoBuffSerializedSessionMetadata sessionMetadata = 2;
 * @return {proto.ProtoBuffSerializedSessionMetadata}
 */
proto.PublishMetadataRequest.prototype.getSessionmetadata = function() {
  return /** @type{proto.ProtoBuffSerializedSessionMetadata} */ (
    jspb.Message.getWrapperField(this, proto.ProtoBuffSerializedSessionMetadata, 2));
};


/** @param {proto.ProtoBuffSerializedSessionMetadata|undefined} value  */
proto.PublishMetadataRequest.prototype.setSessionmetadata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.PublishMetadataRequest.prototype.clearSessionmetadata = function() {
  this.setSessionmetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.PublishMetadataRequest.prototype.hasSessionmetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PublishMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PublishMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PublishMetadataResponse.displayName = 'proto.PublishMetadataResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PublishMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PublishMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PublishMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PublishMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.PublishMetadataResponse} The clone.
 */
proto.PublishMetadataResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.PublishMetadataResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.PublishMetadataResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.PublishMetadataResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto);
